nop          # let's multiply a 2x2 matrix!  [ 1 2 \ 3 4] * [ 5 6 \ 7 8 ]
nop
nop          # step 1 is to set up the matrix in memory
nop
nop          # by convention, memory address 0 is always all 0
nop
loadi 0 5    # load line 0 word 0 to be value 5
loadi 1 1    # load line 0 word 1 to be value 1
loadi 2 0    # load line 0 word 2 to be value 0
loadi 3 5    # load line 0 word 3 to be value 5
loadi 4 3    # load line 0 word 4 to be value 3
loadi 5 0    # load line 0 word 5 to be value 0
sendl        # send completed line to BRAM line 1
loadi 0 7    # load line 0 word 0 to be value 7
loadi 1 2    # load line 0 word 1 to be value 2
loadi 2 0    # load line 0 word 2 to be value 0
loadi 3 7    # load line 0 word 3 to be value 7
loadi 4 4    # load line 0 word 4 to be value 4
loadi 5 0    # load line 0 word 5 to be value 0
sendl        # send completed line to BRAM line 2
loadi 0 6    # load line 0 word 0 to be value 6
loadi 1 1    # load line 0 word 1 to be value 1
loadi 2 0    # load line 0 word 2 to be value 0
loadi 3 6    # load line 0 word 3 to be value 6
loadi 4 3    # load line 0 word 4 to be value 3
loadi 5 0    # load line 0 word 5 to be value 0
sendl        # send completed line to BRAM line 3
loadi 0 8    # load line 0 word 0 to be value 8
loadi 1 2    # load line 0 word 1 to be value 2
loadi 2 0    # load line 0 word 2 to be value 0
loadi 3 8    # load line 0 word 3 to be value 8
loadi 4 4    # load line 0 word 4 to be value 4
loadi 5 0    # load line 0 word 5 to be value 0
sendl        # send completed line to BRAM line 4
nop
nop          # step 2 is to multiply by sending data to FMAs
writeb 1 1 0 # send line 1 to FMA blocks (first mult, col one; replace c)
nop          # wait for BRAM to read out into FMAs
writeb 2 0 1 # send line 2 to FMA blocks (chain dot product; keep c; output valid)
nop          # wait for BRAM to read out into FMAs
writeb 3 1 0 # send line 3 to FMA blocks (first mult, col two; replace c)
nop          # wait for BRAM to read out into FMAs
writeb 4 0 1 # send line 4 to FMA blocks (chain dot product; keep c; output valid)
nop          # wait for BRAM to read out into FMAs
writeb 0 1 1 # send line 0 to FMA blocks (all zeros, just to pad)
nop          # we are writing all zeros to the FMAs to fill up the write buffer
nop          # to have three entries, so that it can flush into the memory 
loadb 5      # load result into c values of line 5
nop          # wait for BRAM to read out into FMAs
end          # results of the matrix multiplication are in line 5
